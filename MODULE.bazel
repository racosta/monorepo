"""Multi-language Bazel Monorepo example"""

module(
    name = "monorepo",
    version = "0.0.0",
)

bazel_dep(name = "aspect_bazel_lib", version = "2.19.4")
bazel_dep(name = "aspect_rules_js", version = "2.1.0")
bazel_dep(name = "aspect_rules_py", version = "1.6.0")
bazel_dep(name = "aspect_rules_ts", version = "3.2.1")
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "gazelle", version = "0.44.0")
bazel_dep(name = "platforms", version = "0.0.11")
bazel_dep(name = "rules_go", version = "0.55.1")
bazel_dep(name = "rules_python", version = "1.4.1")

# Python

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    configure_coverage_tool = True,
    is_default = True,
    python_version = "3.11",
)
python.toolchain(
    configure_coverage_tool = True,
    python_version = "3.12",
)
python.toolchain(
    configure_coverage_tool = True,
    python_version = "3.13",
)
use_repo(
    python,
    "pythons_hub",
    python = "python_versions",
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pypi",
    python_version = "3.11",
    requirements_lock = "//third_party/python:requirements_lock_3_11.txt",
)
pip.parse(
    hub_name = "pypi",
    python_version = "3.12",
    requirements_lock = "//third_party/python:requirements_lock_3_12.txt",
)
pip.parse(
    hub_name = "pypi",
    python_version = "3.13",
    requirements_lock = "//third_party/python:requirements_lock_3_13.txt",
)
use_repo(pip, "pypi")

# Go

go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(version = "1.23.3")

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_work = "//:go.work")
use_repo(
    go_deps,
    "com_github_gin_gonic_gin",
    "com_github_racosta_monorepo_projects_go_hello_world",
)

# Node

npm = use_extension(
    "@aspect_rules_js//npm:extensions.bzl",
    "npm",
    dev_dependency = True,
)
npm.npm_translate_lock(
    name = "npm",
    bins = {
        # derived from "bin" attribute in node_modules/typescript/package.json
        "typescript": [
            "tsc=./bin/tsc",
            "tsserver=./bin/tsserver",
        ],
    },
    npm_package_target_name = "pkg",
    npmrc = "//:.npmrc",
    pnpm_lock = "//:pnpm-lock.yaml",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "npm")

# rules_ts_ext = use_extension(
#     "@aspect_rules_ts//ts:extensions.bzl",
#     "ext",
#     dev_dependency = True,
# )
# rules_ts_ext.deps(ts_version_from = "//:package.json")
# use_repo(rules_ts_ext, "npm_typescript")

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")

# Allows developers to use the matching pnpm version, for example:
# bazel run -- @pnpm --dir /home/runner/work/rules_js/rules_js install
use_repo(pnpm, "pnpm")
